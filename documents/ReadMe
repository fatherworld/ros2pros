订阅和发布----话题通信探索
在机器人世界中，为了能够感知环境信息和执行动作，往往装载了很多传感器和执行器，常见的传感器有摄像头、雷达和惯性测量单元等，常见的执行器有各种类型的地盘，
机械臂关节电动机和电动夹爪等。为了方便各类传感器和执行器数据在机器人系统中传递，ROS2也引入了一套订阅发布机制，即话题通信。
话题名称对应一个接口名称，查看话题详情ros2 topic info topic_name -v
查看接口详情：ros2 interface show interface_name

built_interfaces 是ROS2中已经有的一个消息接口功能包，可以使用其时间接口Time,表示记录消息的时间。
rosidl_default_generators用于将自定义的消息文件转换为c++,python源码的模块
在ros2中，话题消息定义文件必须放置于功能包的msg目录下，文件名必须以大写字母开头且只能由大，小写字母和数字组成
ROR2消息接口支持的9种数据类型
bool,char,byte,float32,float64,int8,uint8,int16,uint16,int32,uint32,int64,uint64,string

服务与参数 ---- 深入ROS2通信
在机器人的世界里，除了需要用话题通信进行单向的数据传递，有时候还需要进行双向的数据传递，比如一个节点发送图片请求另外一个节点进行识别，
另一个节点识别完成后将结果返回给请求节点。服务通信就是ROS2中针对这一场景的解决方案。
编写语音合成节点时候，在代码中将发音设置成了中文，如果我们想要更改发音的语言，就需要修改源码。在实际的机器人开发中，每个节点都会有很多参数需要
动态调整，全部放到代码中既不好管理也不好动态修改。那该怎么解决这一问题呢，此时参数就派上用场了。

rqt查看ros2服务，plugin-->Serives
rqt查看ros参数，plugin-->Configuaration

使用luanch启动脚本：
    海龟巡逻的例子中，如果想通过节点patrol_client给节点turtle_control发送接口和参数,还需要启动节点turtlesim_node，每个节点都需要单独的终端和命令，
    每次启动都需要花上一点时间，launch就是ros2中用于启动和管理ROS2节点和进程的工具，使用它可以简化节点的启动和配置，可以启动多个节点

launch脚本的三个大的功能是：动作，替换，条件

ROS2常用开发工具：机器人开发过程中，坐标转换非常重要且不好处理，ROS2就基于话题通信设计了一套库和工具。用于管理机器人坐标转换。在ROS2中，可以使用
tf2进行坐标变换的相关处理。tf2是第二代左边转换工具。

rad是弧度数，相对于角度数，变换关系是1rad=180/π度
roll,pitch,yaw分别代表绕子坐标系的x,y,z旋转的欧拉角，单位rad

ros2 run tf2_ros static_transform_publisher --x 0.1 --y 0.0 --z 0.2 --roll 0.0 --pitch 0.0 --yaw 0.0 --frame-id base_link --child-frame-id laser_link
ros2 run tf2_ros static_transform_publisher --x 0.3 --y 0.0 --z 0.0 --roll 0.0 --pitch 0.0 --yaw 0.0 --frame-id laser_link --child-frame-id wall_point
根据上面laser_link和wall_point的关系，以及laser_link和base_link的关系，可以推算出wall_point和base_link的关系
ros2 run tf2_ros tf2_echo base_link wall_point

这里发布的依然是静态坐标转换。在真实的机器人中，固定不变的坐标关系才会使用静态坐标转换，比如底盘和激光雷达，底盘和imu。相对于障碍物信息应该使用动态的坐标转换。
在做机器人视觉抓取时，常常会遇到手眼坐标转换问题，其中的手指的是机械臂，眼指的是相机。
imu视觉机器人实现姿态感知，运动状态检测和定位导航的核心传感器之一，通过测量机器人自身的惯性运动参数，为控制系统提供关键的运动数据支撑。imu主要通过内置的两种元器件(陀螺仪和加速度计)，
实时采集机器人的角运动信息和线运动信息

rqt是一个框架，并不单单是一个框架，基于这个框架可以编写新的工具。目前可以使用它查看节点关系，请求服务，参数等
当基于rqt框架安装新的工具比如rqt-tf-free(sudo apt install ros-humble-rqt-tf-tree -y)之后，需要删除rqt的默认安装配置(rm -rf ~/.config/ros.org/rqt_gui.ini)，rqt才能重新扫描加载这个新的工具

rviz2命令可以打开Rviz数据可视化工具，这个工具可以可视化tf坐标转换的关系

数据记录工具ros2 bag：机器人开发工程中的问题往往使出现在数据上，而数据一般都是通过话题进行传递，如果能够记录话题上发布的数据并保存下来，
需要时就重新播放数据，然后进行数据分析和多次实验就好了。ros2bag 就是这样的一个工具。

git 基础 （还原提交了的文件）
1.如果提交了到缓冲区，需要 git reset 具体文件(a.txt);
2.如果需要还原，需要 git checkout 具体文件(a.txt);
3.验证a.txt是否还在缓冲区stash，git status

建模与仿真--创建自己的机器人
在实际的开发中，将算法和程序部署到真实的机器人之前，往往会采用仿真的机器人进行验证。
毕竟不用担心仿真机器人没有电或者磕碰。在没有实体机器人的情况下，仿真机器人就是最好的选择。
但是仿真前需要先对我们要仿真的机器人进行建模，目前实际的机器人并不能做到那样的外观和智能，目前
的机器人结构往往是根据应用场景设计的，比如快递机器人一般是由轮子和货舱组成的，而工业机器人则有
像人一样的手臂，方便进行组装焊接的工作。
对于扫地机器人来说，要完成扫地清洁工作，首先要有执行器完成动作，比如依赖轮子移动，依靠刷子清洁，
还需要有传感器来感知环境，比如通过相机来识别地毯，通过距离传感器规避障碍物
对于一个移动机器人来说，常用的执行器是轮子，依靠轮子才能移动。常用的传感器种类颇多，比如可以测量距离的
激光雷达，超声波，和深度相机传感器，测量轮子转动速度的的轮式编码器，以及测量机器人姿态的imu传感器等，
除此还有常用的图像，电量和红外等常见传感器
机器人除了传感器和执行器，还需要有一个控制系统，其根据传感器传来的数据，进行决策后控制执行器来完成工作。
比如控制系统通过超声波传感器获取到前方障碍物的信息，就可以控制轮子停下并转向。
控制系统通常由计算机或者微观控制器来实现，所以对于仿真机器人来说，只需要对机器人的传感器和执行器以及周围环境进行建模即可。
ros2社区支持的仿真环境:Gazebo(Gazebo Classic 、 Gazebo Harmonic)，WeBot,CoppliaSim 

URDF是通用机器人描述文件的格式
在ros2中，使用robot_state_publisher 和 joint_state_publisher可以将urdf文件转化为话题并将部件之间的位姿关系通过tf发布出来。


